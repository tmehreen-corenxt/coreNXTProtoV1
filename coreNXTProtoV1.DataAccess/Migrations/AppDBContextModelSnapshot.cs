// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using coreNXTProtoV1.DataAccess.Data;

#nullable disable

namespace coreNXTProtoV1.DataAccess.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.AttributeNames", b =>
                {
                    b.Property<long>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AttributeId"), 1L, 1);

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.HasKey("AttributeId");

                    b.HasIndex("LocaleId");

                    b.ToTable("AttributeNames");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<byte>("CatLevel")
                        .HasColumnType("tinyint");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategoryDisplayAttributes", b =>
                {
                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultDisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("HeaderId")
                        .HasColumnType("int");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HeaderId");

                    b.ToTable("CategoryDisplayAttributes");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategoryHeader", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DefaultDisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("HeaderId")
                        .HasColumnType("int");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HeaderId");

                    b.ToTable("CategoryHeader");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategoryNames", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CategoryId");

                    b.HasIndex("LocaleId");

                    b.ToTable("CategoryNames");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategorySearchAttributes", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsPreferred")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("AttributeId");

                    b.ToTable("CategorySearchAttributes");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.HeaderNames", b =>
                {
                    b.Property<int>("HeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeaderId"), 1L, 1);

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("HeaderId");

                    b.HasIndex("LocaleId");

                    b.ToTable("HeaderNames");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.Locales", b =>
                {
                    b.Property<int>("LocaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocaleId"), 1L, 1);

                    b.Property<string>("Countrycode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("LocaleId");

                    b.ToTable("Locales");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"), 1L, 1);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Equivalency")
                        .HasColumnType("float");

                    b.Property<byte>("IsAccessory")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("MfgPartNo")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.ProductAccessories", b =>
                {
                    b.Property<int?>("AccessoryProductId")
                        .HasColumnType("int");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsOption")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsPreferred")
                        .HasColumnType("tinyint");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Recommendation_Weight")
                        .HasColumnType("real");

                    b.HasIndex("AccessoryProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAccessories");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.AttributeNames", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Locales", "Locales")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locales");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.Category", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategoryDisplayAttributes", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.AttributeNames", "AttributeNames")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coreNXTProtoV1.DataAccess.Data.HeaderNames", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");

                    b.Navigation("AttributeNames");

                    b.Navigation("Category");

                    b.Navigation("Header");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategoryHeader", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coreNXTProtoV1.DataAccess.Data.HeaderNames", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");

                    b.Navigation("Category");

                    b.Navigation("Header");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategoryNames", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Locales", "Locales")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locales");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.CategorySearchAttributes", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.AttributeNames", "AttributeNames")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeNames");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.HeaderNames", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Locales", "Locales")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locales");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.Product", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("coreNXTProtoV1.DataAccess.Data.ProductAccessories", b =>
                {
                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Product", "AccessoryProduct")
                        .WithMany()
                        .HasForeignKey("AccessoryProductId");

                    b.HasOne("coreNXTProtoV1.DataAccess.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessoryProduct");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
